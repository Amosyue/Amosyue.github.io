<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>markdown</title>
    <link href="/2022/07/22/markdown/"/>
    <url>/2022/07/22/markdown/</url>
    
    <content type="html"><![CDATA[<p>语法地址：<a href="https://docs.github.com/cn/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax">https://docs.github.com/cn/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax</a></p><p><a href="https://keatonlao.gitee.io/a-study-note-for-markdown/syntax/">https://keatonlao.gitee.io/a-study-note-for-markdown/syntax/</a></p><h1 id="最大标题"><a href="#最大标题" class="headerlink" title="最大标题"></a>最大标题</h1><h2 id="第二大标题"><a href="#第二大标题" class="headerlink" title="第二大标题"></a>第二大标题</h2><h6 id="最小标题"><a href="#最小标题" class="headerlink" title="最小标题"></a>最小标题</h6><p>这个是引用的格式</p><blockquote><p>Text that is a quote</p></blockquote><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs applescript">这个是应用的格式<br>&gt; Text <span class="hljs-keyword">that</span> <span class="hljs-keyword">is</span> a <span class="hljs-literal">quote</span><br><br></code></pre></td></tr></table></figure><p><font color="red">我是红色</font><br><font color="#008000">我是绿色</font></p><div bgcolor="yellow">背景是黄色</div><table><tr><td bgcolor="yellow">背景色yellow</td></tr></table><center>文字居中</center><p>####小坦克</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>多个前端项目中公共组件使用方案（npm包方式）</title>
    <link href="/2019/08/07/npmLink/"/>
    <url>/2019/08/07/npmLink/</url>
    
    <content type="html"><![CDATA[<h2 id="1、背景"><a href="#1、背景" class="headerlink" title="1、背景"></a>1、背景</h2><blockquote><p>公司有多个前端项目，每个项目独立部署，各个项目里可能会使用相同的组件或者页面。对于这样的组件或者页面如何管理呢？我们可以把公共的组件或者页面抽离，单独存放在一个项目里，然后在其他项目里引入这个公共的项目</p></blockquote><h2 id="2、方案"><a href="#2、方案" class="headerlink" title="2、方案"></a>2、方案</h2><p>2.1 创建一个公共组件项目commonpack（名字自己定义），如下图</p><p>outPages目录里是公共组件pageA和pageB，然后在根目录下创建index.js,向外暴露组件pageA和pageB。index.js文件里面代码如下</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs clean"><span class="hljs-keyword">import</span> pageA <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./outPages/pageA&#x27;</span><br><span class="hljs-keyword">import</span> pageB <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;./outPages/pageB&#x27;</span><br><span class="hljs-keyword">export</span> &#123;<br>  pageA,<br>  pageB<br>&#125;<br></code></pre></td></tr></table></figure><p>2.2 创建一个标准的前端项目packageone,packagetwo，那么packageone,packagetwo如何来引入公共组件项目commonpack里的组件pageA和pageB呢？有3个方案。</p><h6 id="方案一：npm发布引用"><a href="#方案一：npm发布引用" class="headerlink" title="方案一：npm发布引用"></a>方案一：npm发布引用</h6><p>公共组件项目commonpack的组件编写完成后，将其发布到npm。开发packageone,packagetwo的人员通过npm install命令将commonpack以node_module的方式引入</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install commonpack <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure><p>另外，每次改动代码再次发布时，需要修改package.json文件中的版本号，不然发布不成功。<br>这种方法在开发阶段不便捷，改个公共组件，改完还得发包，发完后其他项目使用还得从新安装。</p><h6 id="方案二：npm-link"><a href="#方案二：npm-link" class="headerlink" title="方案二：npm link"></a>方案二：npm link</h6><p>首先进入commonpack包，在控制台输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm <span class="hljs-built_in">link</span><br></code></pre></td></tr></table></figure><p>这会创建一个软连接，并保存到目录C:\Users\Administrator\AppData\Roaming\npm\node_modules下面。<br>然后进入packageone和packagetwo，在控制台输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm <span class="hljs-built_in">link</span> commonpack<br></code></pre></td></tr></table></figure><p>这就将这个公共的项目通过软连接的方式引入到项目里面来了。下图可以看到在node_modules中common包和其他的包文件夹样式是不一样的，common文件夹只是一个软链接。</p><p>image.png</p><p>这时修改commonpack项目下面的任意代码都会实时生效，不用打包，不用更新引入包，也不用重启。<br>需要注意的是，当项目包依赖更新后，也就是执行了 npm install xxx 之后，需要重新link common项目。而且使用npm link后本地package.json里没有记录，无法直观的查看本地包的引用。</p><h6 id="方案三：npm本地file引用（推荐）"><a href="#方案三：npm本地file引用（推荐）" class="headerlink" title="方案三：npm本地file引用（推荐）"></a>方案三：npm本地file引用（推荐）</h6><p>分别进入packageone和packagetwo，在控制台输入命令：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">npm install ..<span class="hljs-regexp">/commonpack/</span><br></code></pre></td></tr></table></figure><p>其中&#x2F;commonpack&#x2F;是commonpack的相对路径，这里也可以输入绝对路径。<br>这样就将commonpack这个工程以node_module的方式引入到packageone和packagetwo项目中了。可以正常使用commonpack在index.js中导出的组件了。<br>命令执行完后，package.json里会多一条记录</p><p>image.png<br>同样这时修改common项目下面的任意代码都会实时生效，不用打包，不用更新引入包，也不用重启。而且在package.json中有引入记录。</p><h6 id="3、举例"><a href="#3、举例" class="headerlink" title="3、举例"></a>3、举例</h6><p>我们在packageone项目里引入公共组件pageA和pageB</p><p>image.png</p><h6 id="效果如下"><a href="#效果如下" class="headerlink" title="效果如下"></a>效果如下</h6><p>image.png<br>github项目地址：<a href="https://github.com/Amosyue/npmPackages">https://github.com/Amosyue/npmPackages</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>多个前端项目</tag>
      
      <tag>npm包</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
